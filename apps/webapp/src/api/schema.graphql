schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

enum AnalyticsMetric {
  BOUNCE_RATE
  PAGEVIEWS
  VIEWS_PER_VISIT
  VISIT_DURATION
  VISITORS
  VISITS
}

type AnalyticsMetrics {
  bounceRate: Int
  pageviews: Int
  viewsPerVisit: Float
  visitDuration: Int
  visitors: Int
  visits: Int
}

"""The `AnalyticsPeriod` scalar type is a description of a period of time"""
scalar AnalyticsPeriod

enum AnalyticsProperty {
  EVENT_GOAL
  EVENT_HOSTNAME
  EVENT_PAGE
  VISIT_BROWSER
  VISIT_BROWSER_VERSION
  VISIT_CITY
  VISIT_COUNTRY
  VISIT_DEVICE
  VISIT_ENTRY_PAGE
  VISIT_EXIT_PAGE
  VISIT_OS
  VISIT_OS_VERSION
  VISIT_REFERRER
  VISIT_REGION
  VISIT_SOURCE
  VISIT_UTM_CAMPAIGN
  VISIT_UTM_CONTENT
  VISIT_UTM_MEDIUM
  VISIT_UTM_SOURCE
  VISIT_UTM_TERM
}

type Article {
  category: Category
  contentModules: [ContentModule]
  groups: [UserGroup]
  id: ID
  insertedAt: DateTime
  isPinnedToTop: Boolean
  isReactionsEnabled: Boolean
  preview: String
  previewImageFile: File
  published: Boolean
  reactionCounts: [ArticleReactionCount]
  readyToPublish: Boolean
  tags: [String!]
  title: String
  updatedAt: DateTime
  users: [User]
}

"""Filtering options for the article list"""
input ArticleFilter {
  """Limit the number of results to return"""
  first: Int

  """Return only results updated before than a given date"""
  updatedBefore: DateTime
}

input ArticleInput {
  category: SelectCategoryInput
  contentModules: [ContentModuleInput]
  groups: [SelectUserGroupInput]
  insertedAt: DateTime
  isReactionsEnabled: Boolean
  preview: String
  previewImageFile: SelectFileInput
  published: Boolean
  readyToPublish: Boolean
  tags: [String!]
  title: String!
  updatedAt: DateTime
  users: [SelectUserInput]
}

type ArticleReactionCount {
  count: Int
  type: ArticleReactionType
}

enum ArticleReactionType {
  FACE_FLUSHED
  FACE_SMILE
  HEART
  HEART_CRACK
  LEMON
  PEPPER
  SKULL
  THUMB_UP
}

type Authresult {
  accessToken: String
  refreshToken: String
}

type BreakdownMetrics {
  metrics: [MetricResult]!
  property: String!
}

type CalendarEvent {
  description: String
  end: DateTime
  start: DateTime
  summary: String
  uid: String
}

type Category {
  bannerImageFile: File
  category: Category
  groups: [UserGroup]
  hideArticlesFromHomepage: Boolean
  id: ID
  insertedAt: DateTime
  isHomepage: Boolean
  isSidenav: Boolean
  layoutName: String
  redirect: String
  sortKey: Int
  title: String
  updatedAt: DateTime
  widgets: [Widget]
}

type ContentModule {
  configuration: Json
  content: Json
  files: [File]
  id: ID
  insertedAt: DateTime
  sortKey: Int
  type: ContentModuleType
  updatedAt: DateTime
}

input ContentModuleInput {
  configuration: Json
  content: Json
  files: [SelectFileInput]
  id: ID
  sortKey: Int
  type: ContentModuleType = TEXT
}

type ContentModuleResult {
  id: ID
  insertedAt: DateTime
  result: Json
  updatedAt: DateTime
  user: User
}

enum ContentModuleType {
  AUDIO
  DIVIDER
  DOWNLOAD
  FORM
  IMAGE
  IMAGE_COLLECTION
  TABLE
  TEXT
  TITLE
  VIDEO
}

type Conversation {
  groups: [UserGroup!]
  id: ID
  insertedAt: DateTime
  messages: [Message!]
  unreadMessages: Int
  updatedAt: DateTime
  users: [User!]
}

input CreateCategoryInput {
  category: SelectCategoryInput
  isSidenav: Boolean = false
  title: String!
}

input CreateFeedbackInput {
  content: String!
  metadata: String
  topic: String!
}

type CustomDomain {
  host: String
  id: ID
  insertedAt: DateTime
  isMainDomain: Boolean
  updatedAt: DateTime
}

"""
The `Date` scalar type represents a date. The Date appears in a JSON
response as an ISO8601 formatted string, without a time component.
"""
scalar Date

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

type DeleteUserGroupResult {
  unpublishedArticles: [Article]
  userGroup: UserGroup
}

type Device {
  customName: String
  deviceType: String
  id: ID
  insertedAt: DateTime
  lastUsed: DateTime
  modelName: String
  operatingSystem: String
  platformId: String
  updatedAt: DateTime
}

type Directory {
  id: ID
  insertedAt: DateTime
  name: String
  parentDirectory: Directory
  updatedAt: DateTime
  user: User
}

type Feedback {
  content: String
  id: ID
  insertedAt: DateTime
  isForwarded: Boolean
  isNew: Boolean
  isResponded: Boolean
  metadata: String
  topic: String
  updatedAt: DateTime
  user: User
}

type File {
  fileConversions: [FileConversion]
  fileType: FileType
  filename: String
  filesize: Int
  id: ID
  insertedAt: DateTime
  mimeType: String
  parentDirectory: Directory
  remoteLocation: String
  updatedAt: DateTime
  usage: [FileUsageLocation]
  user: User
  userId: ID
}

type FileArticleUsageLocation {
  article: Article
  usage: String
}

type FileCategoryUsageLocation {
  category: Category
  usage: String
}

type FileContentModuleUsageLocation {
  article: Article
  contentModule: ContentModule
  usage: String
}

type FileConversion {
  format: String
  id: ID
  insertedAt: DateTime
  mimeType: String
  remoteLocation: String
  updatedAt: DateTime
}

type FileSystemUsageLocation {
  usage: String
}

enum FileType {
  AUDIO
  IMAGE
  MISC
  PDF
  VIDEO
}

union FileUsageLocation = FileArticleUsageLocation | FileCategoryUsageLocation | FileContentModuleUsageLocation | FileSystemUsageLocation | FileUserUsageLocation

type FileUserUsageLocation {
  usage: String
  user: User
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

type MediaUsage {
  mediaConversionCurrentPeriod: Float
  mediaFilesTotal: Int
  mediaFilesTotalDuration: Float
}

type Message {
  content: String
  conversation: Conversation
  files: [File]
  id: ID
  insertedAt: DateTime
  updatedAt: DateTime
  user: User
}

input MessageInput {
  content: String
  files: [SelectFileInput]
  recipientGroup: SelectUserGroupInput
  recipientUser: SelectUserInput
}

type MetricResult {
  metric: AnalyticsMetric!
  value: Int!
}

input RegisterDeviceInput {
  customName: String
  deviceType: String
  modelName: String
  operatingSystem: String
  platformId: String!
  pushToken: String
}

input RegisterUserParams {
  email: String
  hideFullName: Boolean
  name: String
  nickname: String
}

type RootMutationType {
  createArticle(article: ArticleInput!): Article
  createCategory(category: CreateCategoryInput!): Category
  createDirectory(isPublic: Boolean, name: String!, parentDirectoryId: ID): Directory
  createFeedback(feedback: CreateFeedbackInput!): Feedback
  createLottaFeedback(message: String!, subject: String): Boolean
  createMessage(message: MessageInput!): Message
  createUserGroup(group: UserGroupInput!): UserGroup
  createWidget(title: String!, type: WidgetType!): Widget
  deleteArticle(id: ID!): Article
  deleteCategory(id: ID!): Category
  deleteDevice(id: ID!): Device
  deleteDirectory(id: ID!): Directory
  deleteFeedback(id: ID!): Feedback
  deleteFile(id: ID!): File
  deleteMessage(id: ID!): Message
  deleteUserGroup(id: ID!): DeleteUserGroupResult
  deleteWidget(id: ID!): Widget
  destroyAccount(transferFileIds: [ID!], userId: ID!): User
  login(password: String, username: String): Authresult
  logout: Authresult
  reactToArticle(articleId: ID!, type: ArticleReactionType!): Article
  register(groupKey: String, user: RegisterUserParams!): Boolean
  registerDevice(device: RegisterDeviceInput!): Device
  requestHisecToken(password: String): String
  requestPasswordReset(email: String!): Boolean
  resetPassword(email: String!, password: String!, token: String!): Authresult
  respondToFeedback(id: ID!, message: String!, subject: String): Feedback
  sendFeedbackToLotta(id: ID!, message: String): Feedback
  sendFormResponse(contentModuleId: ID!, response: Json!): Boolean
  toggleArticlePin(id: ID!): Article
  updateArticle(article: ArticleInput!, id: ID!): Article
  updateCategory(category: UpdateCategoryInput!, id: ID!): Category
  updateDevice(device: UpdateDeviceInput!, id: ID!): Device
  updateDirectory(id: ID!, name: String, parentDirectoryId: ID): Directory
  updateEmail(newEmail: String!): User
  updateFile(filename: String, id: ID!, parentDirectoryId: ID): File
  updatePassword(newPassword: String!): User
  updateProfile(user: UpdateUserParams!): User
  updateTenant(tenant: TenantInput!): Tenant
  updateUser(groups: [SelectUserGroupInput!], id: ID!): User
  updateUserGroup(group: UserGroupInput!, id: ID!): UserGroup
  updateWidget(id: ID!, widget: WidgetInput!): Widget
  uploadFile(file: Upload!, parentDirectoryId: ID!): File
}

type RootQueryType {
  aggregateAnalytics(date: Date!, period: AnalyticsPeriod!): AnalyticsMetrics
  article(id: ID!): Article
  articles(categoryId: ID, filter: ArticleFilter): [Article]
  articlesByTag(tag: String!): [Article!]
  articlesByUser(id: ID!): [Article!]
  articlesWithUserFiles(userId: ID!): [Article]
  breakdownAnalytics(date: Date!, metrics: [AnalyticsMetric!]!, period: AnalyticsPeriod!, property: AnalyticsProperty!): [BreakdownMetrics!]
  calendar(days: Int, url: String!): [CalendarEvent]
  categories: [Category]
  contentModuleResults(contentModuleId: ID!): [ContentModuleResult]
  conversation(id: ID!, markAsRead: Boolean): Conversation
  conversations: [Conversation]
  currentUser: User
  devices: [Device]
  directories(parentDirectoryId: ID): [Directory]
  directory(id: ID): Directory
  feedbacks: [Feedback]
  file(id: ID): File
  files(parentDirectoryId: ID): [File]
  getReactionUsers(id: ID!, type: ArticleReactionType!): [User]
  group(id: ID!): UserGroup
  ownArticles: [Article]
  realtimeAnalytics: Int
  relevantFilesInUsage: [File]
  schedule(date: Date, widgetId: ID!): Json
  search(options: SearchOptions, searchText: String!): [Article]
  searchDirectories(searchterm: String): [Directory!]!
  searchFiles(searchterm: String): [File!]!
  searchUsers(groups: [SelectUserGroupInput], lastSeen: Int, searchtext: String): [User!]!
  tags: [String!]
  tenant(slug: String): Tenant
  timeseriesAnalytics(date: Date!, metric: AnalyticsMetric!, period: AnalyticsPeriod!): [TimeseriesMetrics!]
  unpublishedArticles: [Article]
  usage: [Usage]
  user(id: ID!): User
  userGroups: [UserGroup]
  users: [User]
  widgets(categoryId: ID): [Widget]
}

type RootSubscriptionType {
  articleIsUpdated(id: ID!): Article
  receiveMessage: Message
}

input SearchOptions {
  categoryId: ID
}

input SelectCategoryInput {
  id: ID
}

input SelectFileInput {
  id: ID
}

input SelectUserGroupInput {
  id: ID
}

input SelectUserInput {
  id: ID
}

input SelectWidgetInput {
  id: ID
}

type StorageUsage {
  filesTotal: Int
  usedTotal: Int
}

type Tenant {
  configuration: TenantConfiguration
  customDomains: [CustomDomain]
  host: String
  id: ID
  insertedAt: DateTime
  slug: String
  stats: TenantStats
  title: String
}

type TenantConfiguration {
  backgroundImageFile: File
  customTheme: Json
  logoImageFile: File
  userMaxStorageConfig: String
}

input TenantConfigurationInput {
  backgroundImageFile: SelectFileInput
  customTheme: Json
  logoImageFile: SelectFileInput
  userMaxStorageConfig: String
}

input TenantInput {
  configuration: TenantConfigurationInput
  title: String
}

type TenantStats {
  articleCount: Int
  categoryCount: Int
  fileCount: Int
  userCount: Int
}

type TimeseriesMetrics {
  date: String!
  value: Float
}

input UpdateCategoryInput {
  bannerImageFile: SelectFileInput
  category: SelectCategoryInput
  groups: [SelectUserGroupInput]
  hideArticlesFromHomepage: Boolean
  isSidenav: Boolean
  layoutName: String
  redirect: String
  sortKey: Int
  title: String
  widgets: [SelectWidgetInput] = []
}

input UpdateDeviceInput {
  customName: String
  deviceType: String
  pushToken: String
}

input UpdateUserParams {
  avatarImageFile: SelectFileInput
  class: String
  enrollmentTokens: [String]
  hideFullName: Boolean
  name: String
  nickname: String
}

"""Represents an uploaded file."""
scalar Upload

type Usage {
  media: MediaUsage
  periodEnd: DateTime
  periodStart: DateTime
  storage: StorageUsage
}

type User {
  articles: [Article]
  assignedGroups: [UserGroup]
  avatarImageFile: File
  class: String
  email: String
  enrollmentTokens: [String]
  groups: [UserGroup]
  hasChangedDefaultPassword: Boolean
  hideFullName: Boolean
  id: ID
  insertedAt: DateTime
  lastSeen: DateTime
  name: String
  nickname: String
  unreadMessages: Int
  updatedAt: DateTime
}

type UserGroup {
  canReadFullName: Boolean
  enrollmentTokens: [String]
  id: ID
  insertedAt: DateTime
  isAdminGroup: Boolean
  name: String
  sortKey: Int
  updatedAt: DateTime
}

input UserGroupInput {
  canReadFullName: Boolean
  enrollmentTokens: [String]
  isAdminGroup: Boolean
  name: String
  sortKey: Int
}

type Widget {
  configuration: Json
  groups: [UserGroup]
  iconImageFile: File
  id: ID
  title: String
  type: WidgetType
}

input WidgetInput {
  configuration: Json
  groups: [SelectUserGroupInput]
  iconImageFile: SelectFileInput
  title: String!
}

enum WidgetType {
  CALENDAR
  IFRAME
  SCHEDULE
  TAGCLOUD
}

