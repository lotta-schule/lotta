import Config

config :lotta, :base_uri,
  host: "lotta.lvh.me",
  scheme: "http",
  port: 3000

config :lotta, Lotta.Repo,
  username: "lotta",
  password: "lotta",
  database: "lotta",
  hostname: "localhost",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

config :lotta, :rabbitmq, url: "amqp://guest:guest@localhost"

config :lotta, :redis_connection,
  host: "localhost",
  password: "lotta",
  name: :redix

config :lotta, Lotta.Elasticsearch.Cluster, []

config :lotta, Lotta.Mailer, adapter: Bamboo.LocalAdapter

config :ex_aws, :s3,
  http_client: ExAws.Request.Hackney,
  access_key_id: "AKIAIOSFODNN7EXAMPLE",
  secret_access_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
  host: "localhost",
  scheme: "http://",
  port: 9000

config :lotta, :cockpit, admin_api_key: "abc"

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :lotta, LottaWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: []

config :lotta, CockpitWeb.Endpoint,
  http: [port: 4001],
  debug_errors: true,
  code_reloader: false,
  check_origin: false,
  watchers: []

config :lotta, LottaWeb.Auth.AccessToken,
  issuer: "lotta",
  secret_key: "JM1gXuiWLLO766ayWjaee4Ed/8nmwssLoDbmtt0+yct7jO8TmFsCeOQhDcqQ+v2D"

config :lotta, :schedule_provider_url, "http://localhost:3111"

config :lotta, Lotta.Storage.RemoteStorage,
  default_storage: "minio",
  storages:
    System.get_env("REMOTE_STORAGE_STORES", "")
    |> String.split(",")
    |> Enum.filter(&(String.length(&1) > 0))
    |> Enum.reduce(%{}, fn storage_name, acc ->
      env_name =
        storage_name
        |> String.upcase()
        |> String.replace("-", "_")

      acc
      |> Map.put(storage_name, %{
        type: Lotta.Storage.RemoteStorage.Strategy.S3,
        config: %{
          endpoint: System.get_env("REMOTE_STORAGE_#{env_name}_ENDPOINT"),
          bucket: System.get_env("REMOTE_STORAGE_#{env_name}_BUCKET")
        }
      })
    end)
    |> Map.merge(%{
      "minio" => %{
        type: Lotta.Storage.RemoteStorage.Strategy.S3,
        config: %{
          endpoint: "http://localhost:9000",
          bucket: "lotta-dev-ugc"
        }
      }
    })

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

config :absinthe, Absinthe.Logger, pipeline: true

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
