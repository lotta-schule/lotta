stages:
  - test
  - build
  - deploy

variables:
  # set docker host to connect to docker in kubernetes
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_DRIVER: overlay2
  # TODO: Set correct certs dir to /certs according to this article: https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
  DOCKER_TLS_CERTDIR: ""

cache:
  key: "lotta-api-deps"
  paths:
    - deps/

test:
  stage: test
  image: elixir:1.9.1
  variables:
    MIX_ENV: test
    POSTGRES_PASSWORD: lotta
    POSTGRES_USER: lotta
    POSTGRES_DB: api_test
    REDIS_PASSWORD: lotta
  services:
    - name: postgres:latest
    - name: rabbitmq:latest
    - name: bitnami/redis:latest
      alias: redis
  before_script:
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get --only test
  script:
    # gitlab k8s-runner has a problem with service hostname exposition
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2229
    - make tests-ci
  coverage: '/\[TOTAL\]\s+(\d+\.\d+%)$/'

build docker image:
  stage: build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  script:
    - docker build --cache-from lotta/api:latest -t lotta/api:$CI_COMMIT_SHA .
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
    - if [ $CI_COMMIT_REF_NAME == "develop" ]; then docker tag lotta/api:$CI_COMMIT_SHA lotta/api:staging; fi;
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then docker tag lotta/api:$CI_COMMIT_SHA lotta/api:latest; fi;
    - docker push lotta/api

deploy staging:
  stage: deploy
  environment:
    name: staging
  image:
    name: lotta/do-helm-deploy:latest
  script:
    - /user/local/bin/setup.sh
    - helm repo add lotta https://medienportal.gitlab.io/helm-charts
    - helm repo update
    - helm upgrade --install lotta-api-staging lotta/lotta-api
      --namespace lotta-staging
      --set image.pullPolicy=Always
      --set appEnvironment=staging
      --set baseUrl=.staging.lotta.schule
      --set image.tag=$CI_COMMIT_SHA
      --set replicaCount=1
      --set jwtSecret=$JWT_SECRET
      --set baseSecret=$BASE_SECRET
      --set honeybadger.enabled=true
      --set honeybadger.apiKey=$HONEYBADGER_API_KEY
      --set s3Compat.endpoint=$S3COMPAT_ENDPOINT
      --set s3Compat.accessKeyId=$S3COMPAT_ACCESS_KEY_ID
      --set s3Compat.secretAccessKey=$S3COMPAT_SECRET_ACCESS_KEY
      --set s3Compat.bucket=$S3COMPAT_BUCKET
      --set s3Compat.region=$S3COMPAT_REGION
      --set s3Compat.cdnBaseUrl=$S3COMPAT_CDN_BASE_URL
      --set url=api.staging.lotta.schule
      --set ingress.enabled=true
      --set-string ingress.annotations."traefik\.ingress\.kubernetes\.io/priority"="5"
      --set ingress.hosts[0].host=api.staging.lotta.schule
      --set ingress.hosts[0].paths[0]=/
      --set ingress.tls[0].hosts[0]=api.staging.lotta.schule
      --set postgresql.postgresqlDatabase=$POSTGRES_DB
      --set postgresql.postgresqlUsername=$POSTGRES_USER
      --set postgresql.postgresqlPassword=$POSTGRES_PASSWORD
      --set rabbitmq.rabbitmq.username=$RABBITMQ_USERNAME
      --set rabbitmq.rabbitmq.password=$RABBITMQ_PASSWORD
      --set redis.password=$REDIS_PASSWORD
      --set redis.cluster.slaveCount=1
      --set redis.metrics.enabled=true
      --set resources.limits.cpu=300m
      --set resources.limits.memory=768Mi
      --set resources.requests.cpu=200m
      --set resources.requests.memory=384Mi
  only:
    refs:
      - develop

deploy production:
  stage: deploy
  environment:
    name: production
  image:
    name: lotta/do-helm-deploy:latest
  script:
    - /user/local/bin/setup.sh
    - helm repo add lotta https://medienportal.gitlab.io/helm-charts
    - helm repo update
    - helm upgrade --install lotta-api lotta/lotta-api
      --namespace lotta
      --set appEnvironment=production
      --set baseUrl=.lotta.schule
      --set image.tag=$CI_COMMIT_SHA
      --set replicaCount=2
      --set jwtSecret=$JWT_SECRET
      --set baseSecret=$BASE_SECRET
      --set honeybadger.enabled=true
      --set honeybadger.apiKey=$HONEYBADGER_API_KEY
      --set s3Compat.endpoint=$S3COMPAT_ENDPOINT
      --set s3Compat.accessKeyId=$S3COMPAT_ACCESS_KEY_ID
      --set s3Compat.secretAccessKey=$S3COMPAT_SECRET_ACCESS_KEY
      --set s3Compat.bucket=$S3COMPAT_BUCKET
      --set s3Compat.region=$S3COMPAT_REGION
      --set s3Compat.cdnBaseUrl=$S3COMPAT_CDN_BASE_URL
      --set url=api.lotta.schule
      --set ingress.enabled=true
      --set-string ingress.annotations."traefik\.ingress\.kubernetes\.io/priority"="5"
      --set ingress.hosts[0].host=api.lotta.schule
      --set ingress.hosts[0].paths[0]=/
      --set ingress.tls[0].hosts[0]=api.lotta.schule
      --set postgresql.postgresqlDatabase=$POSTGRES_DB
      --set postgresql.postgresqlUsername=$POSTGRES_USER
      --set postgresql.postgresqlPassword=$POSTGRES_PASSWORD
      --set rabbitmq.rabbitmq.username=$RABBITMQ_USERNAME
      --set rabbitmq.rabbitmq.password=$RABBITMQ_PASSWORD
      --set postgresql.backupJob.enabled=true
      --set-string postgresql.backupJob.s3Compat.hostBucket="\%(bucket)s\.fra1\.digitaloceanspaces\.com"
      --set postgresql.backupJob.s3Compat.bucketName=lotta-backup-data
      --set postgresql.backupJob.s3Compat.path="/postgres"
      --set redis.password=$REDIS_PASSWORD
      --set redis.cluster.slaveCount=2
      --set redis.metrics.enabled=true
      --set resources.limits.cpu=500m
      --set resources.limits.memory=1536Mi
      --set resources.requests.cpu=200m
      --set resources.requests.memory=512Mi
  only:
    refs:
      - master
