stages:
  - test
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
  MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  POSTGRES_USER: lotta
  POSTGRES_PASSWORD: lotta
  REDIS_PASSWORD: lotta
  MIX_ENV: test

cache:
  paths:
    - deps/
    - _build/

.elixir: &elixir
  image: elixir:1.12
  before_script:
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get --only $MIX_ENV

lint:
  extends: .elixir
  stage: test
  variables:
    MIX_ENV: test
  script:
    - mix compile --warnings-as-errors --force
    - mix format --check-formatted
    - mix credo -a

test:
  extends: .elixir
  services:
    - name: postgres:latest
    - name: rabbitmq:latest
    - name: bitnami/redis:latest
      alias: redis
    - name: minio/minio:latest
      alias: minio
      entrypoint: ['sh']
      command: ['-c', 'mkdir -p /export/lotta-dev-ugc && /opt/bin/minio server /export']
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
      alias: elasticsearch
      command:
        - "bin/elasticsearch"
        - "-Ediscovery.type=single-node"
        - "-Expack.security.enabled=false"
  stage: test
  script:
    - mix test --cover
  artifacts:
    when: always
    paths:
      - _build/test/lib/lotta/test-junit-report.xml
    reports:
      junit: _build/test/lib/lotta/test-junit-report.xml
  coverage: '/\[TOTAL\]\s+(\d+\.\d+%)$/'

# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
include:
  - template: Security/SAST.gitlab-ci.yml

build docker image:staging:
  stage: build
  environment:
    name: staging
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}, \"https://index.docker.io/v1/\":{\"auth\":\"$(echo -n "$DOCKER_HUB_USER:$DOCKER_HUB_PASSWORD" | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --destination lotta/api:canary;
  only:
    refs:
      - develop

build docker image:production:
  stage: build
  environment:
    name: production
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$(echo -n "$DOCKER_HUB_USER:$DOCKER_HUB_PASSWORD" | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination lotta/api:$CI_COMMIT_TAG --destination lotta/api:stable --destination lotta/api:latest;
  only:
    - tags

deploy:staging:
  stage: deploy
  environment:
    name: staging
    url: https://core.staging.lotta.schule
  image:
    name: lotta/ionos-helm-deploy:latest
  script:
  - /user/local/bin/setup.sh
  - curl "https://sentry.io/api/0/organizations/$SENTRY_ORGANIZATION_SLUG/releases/" -X POST -X POST -H "Authorization:Bearer $SENTRY_API_TOKEN" -H 'Content-Type:application/json' -d "{ \"version\":\"api-$CI_COMMIT_SHA\", \"refs\":[{ \"repository\":\"$CI_PROJECT_PATH\", \"commit\":\"$CI_COMMIT_SHA\", \"previousCommit\":\"$CI_COMMIT_BEFORE_SHA\" }], \"projects\":[\"api\"] }"
  - helm repo add lotta $LOTTA_HELM_REPO_URL
  - helm repo update
  - helm upgrade --install lotta-core lotta/lotta-core
    --namespace lotta-staging
    --reuse-values
    --set elasticsearch.enabled=false
    --set imagePullSecrets[0].name=regcred
    --set image.repository=$CI_REGISTRY_IMAGE
    --set image.tag=$CI_COMMIT_SHA
    --set appRevision=$CI_COMMIT_SHA
    --set baseSecret=$BASE_SECRET
    --set jwtSecret=$JWT_SECRET
    --set cockpit.adminApiKey=$COCKPIT_ADMIN_API_KEY
    --set appEnvironment=staging
    --set baseUri.host="staging.lotta.schule"
    --set ingress.hosts[0].name="core.staging.lotta.schule"
    --set ingress.hosts[0].tls=true
    --set ingress.hosts[0].tlsSecret="core-staging-lotta-schule-tls"
    --set sentry.dsn=$SENTRY_DSN
    --set mailgun.apiKey=$MAILGUN_API_KEY
    --set mailgun.domain=$MAILGUN_DOMAIN
    --set s3Storage.endpoint=$S3COMPAT_ENDPOINT
    --set s3Storage.accessKeyId=$S3COMPAT_ACCESS_KEY_ID
    --set s3Storage.secretAccessKey=$S3COMPAT_SECRET_ACCESS_KEY
    --set s3Storage.region=$S3COMPAT_REGION
    --set redis.auth.password=$REDIS_PASSWORD
    --set postgresql.postgresqlPassword=$POSTGRES_PASSWORD
    --set postgresql.postgresqlPostgresPassword=$POSTGRES_PASSWORD
    --set rabbitmq.auth.password=$RABBITMQ_PASSWORD
    --set rabbitmq.auth.erlangCookie=$RABBITMQ_ERLANG_COOKIE
  - curl "https://sentry.io/api/0/organizations/$SENTRY_ORGANIZATION_SLUG/releases/api-$CI_COMMIT_SHA/deploys/" -X POST -X POST -H 'Content-Type:application/json' -H "Authorization:Bearer $SENTRY_API_TOKEN" -d '{"environment":"staging"}'
  only:
    refs:
    - develop

deploy:production:
  stage: deploy
  environment:
    name: production
    url: https://core.lotta.schule
  image:
    name: lotta/ionos-helm-deploy:latest
  script:
  - /user/local/bin/setup.sh
  - curl "https://sentry.io/api/0/organizations/$SENTRY_ORGANIZATION_SLUG/releases/" -X POST -X POST -H "Authorization:Bearer $SENTRY_API_TOKEN" -H 'Content-Type:application/json' -d "{ \"version\":\"api-$CI_COMMIT_TAG\", \"refs\":[{ \"repository\":\"$CI_PROJECT_PATH\", \"commit\":\"$CI_COMMIT_SHA\", \"previousCommit\":\"$CI_COMMIT_BEFORE_SHA\" }], \"projects\":[\"api\"] }"
  - helm repo add lotta $LOTTA_HELM_REPO_URL
  - helm repo update
  - helm upgrade --install lotta-core lotta/lotta-core
    --namespace lotta
    --reuse-values
    --set autoscaling.enabled=true
    --set autoscaling.minReplicas=2
    --set autoscaling.maxReplicas=3
    --set elasticsearch.enabled=false
    --set image.tag=$CI_COMMIT_TAG
    --set appRevision=$CI_COMMIT_TAG
    --set baseSecret=$BASE_SECRET
    --set jwtSecret=$JWT_SECRET
    --set cockpit.adminApiKey=$COCKPIT_ADMIN_API_KEY
    --set appEnvironment=prod
    --set baseUri.host="lotta.schule"
    --set ingress.hosts[0].name="core.lotta.schule"
    --set ingress.hosts[0].tls=true
    --set ingress.hosts[0].tlsSecret="core-lotta-schule-tls"
    --set sentry.dsn=$SENTRY_DSN
    --set mailgun.apiKey=$MAILGUN_API_KEY
    --set mailgun.domain=$MAILGUN_DOMAIN
    --set s3Storage.endpoint=$S3COMPAT_ENDPOINT
    --set s3Storage.accessKeyId=$S3COMPAT_ACCESS_KEY_ID
    --set s3Storage.secretAccessKey=$S3COMPAT_SECRET_ACCESS_KEY
    --set s3Storage.region=$S3COMPAT_REGION
    --set redis.auth.password=$REDIS_PASSWORD
    --set postgresql.postgresqlPassword=$POSTGRES_PASSWORD
    --set postgresql.postgresqlPostgresPassword=$POSTGRES_PASSWORD
    --set rabbitmq.auth.password=$RABBITMQ_PASSWORD
    --set rabbitmq.auth.erlangCookie=$RABBITMQ_ERLANG_COOKIE
  - curl "https://sentry.io/api/0/organizations/$SENTRY_ORGANIZATION_SLUG/releases/api-$CI_COMMIT_TAG/deploys/" -X POST -X POST -H 'Content-Type:application/json' -H "Authorization:Bearer $SENTRY_API_TOKEN" -d '{"environment":"staging"}'
  only:
    - tags

pages:
  stage: build
  environment:
    name: production
  image: elixir:1.12
  before_script:
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
  script:
    - mix docs
    - mv doc public
  artifacts:
    paths:
      - "public"
  only:
    refs:
      - develop
