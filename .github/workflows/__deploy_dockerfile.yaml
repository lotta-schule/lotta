---
name: 'Deploy Dockerfile'

on:
  workflow_call:
    inputs:
      registry:
        description: The docker registry to use. Defaults to ghcr.io
        type: string
        required: false
        default: ghcr.io
      name:
        description: The image name. Defaults to the name of the registry + the repository
        type: string
        required: false
        default: '${{ inputs.registry }}/${{ github.repository }}'
      context:
        description: The directory that will be used as build context for the docker build
        type: string
        required: false
        default: '.'
      dockerfile:
        type: string
        required: false
      platforms:
        description: |
          The platforms to build the image for. Defaults to empty (auto-detect),
          and thus – here on GitHub – very probably linux/amd64
          Please provide a valid JSON array of platforms! (yeah, I know, it's a bit awkward)
        type: string
        required: false
      push:
        description: |
          Whether to push the image to the registry. Defaults to true
        type: string
        required: false
        default: 'true'
      sentry_dsn:
        type: string
        required: false
        description: |
          The sentry dsn to use for the build. This is required
          if you want to upload sourcemaps to sentry
    secrets:
      username:
        description: |
          The username to use. Defaults to $\{\{ github.actor \}\}
        required: false
      password:
        required: true
      sentry_auth_token:
        required: false
        description: |
          The sentry auth token to use for the build. This is required
          if you want to upload sourcemaps to sentry
    outputs:
      release_name:
        description: The release name of the image and main image tag
        value: ${{ jobs.merge_digests.outputs.release_name }}

jobs:
  build-image:
    name: 'Build image from Dockerfile'
    runs-on: ${{ contains(matrix.platform, 'arm64') && 'warp-ubuntu-2204-arm64-4x' || 'ubuntu-24.04' }}
    env:
      IMAGE_NAME: '${{ inputs.name }}'
      LONG_IMAGE_NAME: 'ghcr.io/lotta-schule/${{ inputs.name }}'
    strategy:
      fail-fast: true
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ inputs.checkout-ref }}

      - name: Parse platform to platform pair
        env:
          platform: ${{ matrix.platform }}
        run: |
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Get docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.LONG_IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Login to remote registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username || github.actor }}
          password: ${{ secrets.password || github.token }}

      - name: Build and push *by digest*
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ format('{0}/{1}', inputs.context, (inputs.dockerfile || 'Dockerfile')) }}
          platforms: ${{ matrix.platform }}
          build-args: |
            IMAGE_NAME=$IMAGE_NAME
            RELEASE_NAME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            SENTRY_DSN=${{ inputs.sentry_dsn }}
          secrets: |
            sentry_auth_token=${{ secrets.sentry_auth_token }}
          cache-from: 'type=gha,scope=buildkit-${{ env.IMAGE_NAME }}-${{ matrix.platform }}'
          cache-to: 'type=gha,mode=max,scope=buildkit-${{ env.IMAGE_NAME }}-${{ matrix.platform }}'
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.LONG_IMAGE_NAME }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export image digest
        run: |
          mkdir -p /tmp/docker-digest
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/docker-digest/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.IMAGE_NAME }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/docker-digest/*
          if-no-files-found: error
          retention-days: 1

  merge_digests:
    name: Merge docker platform digests
    runs-on: ubuntu-24.04
    needs:
      - build-image
    outputs:
      release_name: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    env:
      IMAGE_NAME: '${{ inputs.name }}'
      LONG_IMAGE_NAME: 'ghcr.io/lotta-schule/${{ inputs.name }}'
      DOCKER_METADATA_PR_HEAD_SHA: 'true'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-${{ env.IMAGE_NAME }}-*
          path: /tmp/docker-digest/
          merge-multiple: true

      - name: Login to remote registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username || github.actor }}
          password: ${{ secrets.password || github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.LONG_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,priority=500,prefix=,format=long
            type=sha,prefix=canary-,format=long,enable=${{ github.ref_name == 'main' }}

      - name: Create manifest list and push
        working-directory: /tmp/docker-digest
        run: |
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.LONG_IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.LONG_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
