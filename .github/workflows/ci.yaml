---
name: 'CI'
on:
  push:

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  GITHUB_ACTIONS: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup main branch for reference
        if: ${{ github.ref_name != 'main' }}
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup PNPM package manager
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup the BEAM and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '26.2.2'
          elixir-version: '1.16.1'

      - name: Install node dependencies
        run: pnpm install

      - name: Lint
        run: pnpm nx affected -t lint

      - name: Typecheck
        run: pnpm nx affected -t typecheck

  test:
    name: Run tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          -e POSTGRES_USER=lotta
          -e POSTGRES_PASSWORD=lotta
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
      redis:
        image: bitnami/redis:latest
        ports:
          - 6379:6379
        options: >-
          -e REDIS_PASSWORD=lotta
      minio:
        image: bitnami/minio:latest
        ports:
          - 9000:9000
        options: >-
          -e MINIO_ROOT_USER="AKIAIOSFODNN7EXAMPLE"
          -e MINIO_ROOT_PASSWORD="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          -e MINIO_DEFAULT_BUCKETS="lotta-dev-ugc"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup minio
        run: >
          docker run --network host --name minio_setup --entrypoint /bin/bash minio/mc -c "
          /usr/bin/mc config host add minio http://localhost:9000 AKIAIOSFODNN7EXAMPLE wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
          /usr/bin/mc rm -r --force minio/lotta-dev-ugc;
          /usr/bin/mc mb minio/lotta-dev-ugc;
          /usr/bin/mc anonymous set download minio/lotta-dev-ugc;
          exit 0;
          "

      - name: Setup main branch for reference
        if: ${{ github.ref_name != 'main' }}
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup PNPM package manager
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup the BEAM and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '26.2.2'
          elixir-version: '1.16.1'

      - name: Install npm dependencies
        run: pnpm install

      - name: Run Unit / Component tests
        run: pnpm nx affected -t test --configuration=coverage
        env:
          NODE_ENV: test
          MIX_ENV: test

      - name: Run end-to-end tests
        run: |
          pnpm exec playwright install --with-deps chromium
          pnpm nx affected -t e2e --configuration=ci

      - name: Upload Tests for storybook-addon-theme
        uses: codecov/codecov-action@v4
        with:
          directory: libs/storybook-addon-theme/coverage/
          flags: storybook-addon-theme
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload Tests for hubert
        uses: codecov/codecov-action@v4
        with:
          directory: libs/hubert/coverage/
          flags: hubert
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload Tests for Webapp
        uses: codecov/codecov-action@v4
        with:
          directory: apps/webapp/coverage/
          flags: webapp
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload Tests for CoreApi
        uses: codecov/codecov-action@v4
        with:
          directory: apps/core-api/cover/
          flags: core-api
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  check-build:
    name: Check the projects build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup main branch for reference
        if: ${{ github.ref_name != 'main' }}
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup PNPM package manager
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup the BEAM and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '26.2.2'
          elixir-version: '1.16.1'

      - name: Install npm dependencies
        run: pnpm install

      - name: Run build task
        run: pnpm nx affected -t build

  storybook-chromatic:
    name: Storybook visual testing on Chromatic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM package manager
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install npm dependencies
        run: pnpm install

      - name: Build storybook
        run: NODE_ENV=test pnpm nx build storybook-hubert

      - name: Send to Chromatic
        uses: chromaui/action@v1
        with:
          workingDir: './apps/storybook-hubert'
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          skip: 'dependabot/**'
          autoAcceptChanges: 'main'
          storybookBuildDir: storybook-static
        env:
          NODE_ENV: test

  update-package-versions:
    name: Update the package.json versions and create commit
    needs:
      - lint
      - test
      - check-build
    if: ${{ startsWith(github.ref_name, 'release/') }}
    runs-on: ubuntu-latest
    outputs:
      updated-sha: ${{ steps.updated-sha.outputs.sha }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set git identity
        run: |
          git config user.email lotta@einsa.net
          git config user.name Lottaautomatica

      - name: Setup main branch for reference
        if: ${{ github.ref_name != 'main' }}
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: pnpm install

      - name: Run build task
        # TODO: This should run build only on libraries
        # that are to be deployed as npm packages
        run: pnpm nx run-many -t build

      - name: Create commit and tag version
        if: ${{ startsWith(github.ref_name, 'release/') }}
        run: |
          pnpm exec lerna version -y --conventional-commits --conventional-graduate

      - name: Output new commit sha
        if: ${{ github.ref_name == 'main' || startsWith(github.ref_name, 'release/') }}
        id: updated-sha
        run: |
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> $GITHUB_OUTPUT
          echo "Saved new commit SHA $sha to output"

  publish-npm-packages:
    if: ${{ startsWith(github.ref_name, 'release/') }}
    needs:
      - update-package-versions
    uses: ./.github/workflows/__deploy_npm_packages.yaml
    with:
      checkout-ref: ${{ needs.update-package-versions.outputs.updated-sha }}
    secrets:
      npm-token: ${{ secrets.NPM_TOKEN }}
      nx-token: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  publish-docker-image:
    if: ${{ github.ref_name != 'main'}}
    uses: ./.github/workflows/__deploy_dockerfile.yaml
    with:
      name: lotta-schule/web
      tags: '["${{ github.sha }}"]'
      # checkout-ref: ${{ needs.update-package-versions.outputs.updated-sha }}
      working-directory: .
      dockerfile: apps/webapp/Dockerfile
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}
      sentry_auth_token: ${{ secrets.SENTRY_AUTH_TOKEN }}
      sentry_dsn: ${{ secrets.SENTRY_DSN }}

  publish-staging-docker-image:
    if: ${{ github.ref_name == 'main'}}
    uses: ./.github/workflows/__deploy_dockerfile.yaml
    with:
      name: lotta-schule/web
      tags: '["${{ github.sha }}", "canary-${{ github.sha }}"]'
      # checkout-ref: ${{ needs.update-package-versions.outputs.updated-sha }}
      working-directory: .
      dockerfile: apps/webapp/Dockerfile
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}
      sentry_auth_token: ${{ secrets.SENTRY_AUTH_TOKEN }}
      sentry_dsn: ${{ secrets.SENTRY_DSN }}

  publish-storybook-page:
    if: ${{ github.ref_name == 'main' }}
    name: Publish Hubert Storybook as Github Page
    needs:
      - update-package-versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.update-package-versions.outputs.updated-sha }}

      - name: Setup PNPM package manager
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install npm dependencies
        run: pnpm install

      - name: Build storybook
        run: pnpm nx build storybook-hubert

      # Maybe think of deploying statically to S3 or so?
      - name: 'Deploy Storybook as github page'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./apps/storybook-hubert/storybook-static
