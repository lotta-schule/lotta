---
name: 'CI (Legacy, <= 4.2.x)'
on:
  push:
    branches:
      - release/*

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

permissions:
  contents: write
  packages: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup main branch for reference
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install --include=dev

      - name: Lint
        run: npm run nx affected -- -t lint

      - name: Typecheck
        run: npm run nx affected -- -t typecheck

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup main branch for reference
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install --include=dev

      - name: Run Unit / Component tests
        run: npm run nx affected -- -t test --ci --collectCoverage --configuration=ci

      - name: Run end-to-end tests
        run: |
          npx playwright install --with-deps chromium
          npm run nx affected -- -t e2e --configuration=ci

  check-build:
    name: Check the projects build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup main branch for reference
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install --include=dev

      - name: Run build task
        run: npm run nx affected -- -t build

  update-package-versions:
    name: Update the package.json versions and create commit
    needs:
      - lint
      - test
      - check-build
    runs-on: ubuntu-latest
    outputs:
      updated-sha: ${{ steps.updated-sha.outputs.sha }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set git identity
        run: |
          git config user.email lotta@einsa.net
          git config user.name Lottaautomatica

      - name: Setup main branch for reference
        run: git branch --track main origin/main

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install --include=dev

      - name: Run build task
        # TODO: This should run build only on libraries
        # that are to be deployed as npm packages
        run: npm run nx run-many -- -t build

      - name: Create commit and tag version
        run: |
          npx lerna version -y --conventional-commits --conventional-graduate

      - name: Output new commit sha
        id: updated-sha
        run: |
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> $GITHUB_OUTPUT
          echo "Saved new commit SHA $sha to output"

  publish-npm-packages:
    needs:
      - update-package-versions
    name: 'Push npm packages to registry'
    runs-on: ubuntu-latest
    outputs:
      version-name: ${{ steps.publish.outputs.version-name }}
      tag-name: ${{ steps.publish.outputs.tag-name }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.update-package-versions.outputs.updated-sha  }}

      - name: Setup NX
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: 20
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Run build task
        run: npm run nx run-many -- -t build --projects=tag:deploy:npm

      - name: Publish to npm
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          tag='latest'
          version=$(cat lerna.json | jq -r .version)
          if [[ $version == *'-'* ]]; then
            tag=$(echo $version | sed -E 's/^.*-([a-z]*).*/\1/')
          fi
          echo "version-name=$version" >> $GITHUB_OUTPUT
          echo "tag-name=$tag" >> $GITHUB_OUTPUT
          echo "Outputting version-name ($version) and tag-name ($tag) to github output"
          lerna publish from-package --yes

  publish-docker-image:
    name: 'Publish Docker image'
    runs-on: ubuntu-latest
    needs:
      - update-package-versions
      - publish-npm-packages
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ needs.update-package-versions.outputs.updated-sha }}

      - name: Build docker image
        id: build
        run: |
          tag=$(echo "${{ needs.update-package-versions.outputs.updated-sha }}")
          base_image=$IMAGE_NAME:$tag
          docker build --build-arg IMAGE_NAME -t $base_image .
          echo "base-image=$base_image" >> $GITHUB_OUTPUT
          echo "Base image $base_image written to github output"
        working-directory: packages/webapp

      - name: docker login
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: push image to registry as latest
        run: |
          tag=$(echo "${{ needs.publish-npm-packages.outputs.version-name }}")
          docker push ${{ steps.build.outputs.base-image }}
          docker tag ${{ steps.build.outputs.base-image }} $IMAGE_NAME:$tag
          docker push $IMAGE_NAME:$tag
    env:
      IMAGE_NAME: ghcr.io/lotta-schule/web
